{
	"info": {
		"_postman_id": "22b2f503-af8a-446a-b78b-fcb3c07964c4",
		"name": "productsapp-automation",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39118925"
	},
	"item": [
		{
			"name": "Get All Products",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"pm.test(\"value of [0].Id to be 1\", () => {pm.expect(jsonData[0].Id).to.equal(1)});\r",
							"pm.test(\"response to be 200 OK\", () => {pm.response.to.have.status(200)});\r",
							"\r",
							"\r",
							"pm.test(\"First product has an ID\", () => { \r",
							"    pm.expect(jsonData[0]).to.have.property(\"Id\");\r",
							"});\r",
							"pm.test(\"First product has a Name\", () => { \r",
							"    pm.expect(jsonData[0]).to.have.property(\"Name\");\r",
							"});\r",
							"pm.test(\"First product has a Category\", () => { \r",
							"    pm.expect(jsonData[0]).to.have.property(\"Category\");\r",
							"});\r",
							"pm.test(\"First product has a Price\", () => { \r",
							"    pm.expect(jsonData[0]).to.have.property(\"Price\");\r",
							"});\r",
							"\r",
							"pm.test(\"Second product has an ID\", () => { \r",
							"    pm.expect(jsonData[1]).to.have.property(\"Id\");\r",
							"});\r",
							"pm.test(\"Second product has a Name\", () => { \r",
							"    pm.expect(jsonData[1]).to.have.property(\"Name\");\r",
							"});\r",
							"pm.test(\"Second product has a Category\", () => { \r",
							"    pm.expect(jsonData[1]).to.have.property(\"Category\");\r",
							"});\r",
							"pm.test(\"Second product has a Price\", () => { \r",
							"    pm.expect(jsonData[1]).to.have.property(\"Price\");\r",
							"});\r",
							"\r",
							"pm.test(\"Third product has an ID\", () => { \r",
							"    pm.expect(jsonData[2]).to.have.property(\"Id\");\r",
							"});\r",
							"pm.test(\"Third product has a Name\", () => { \r",
							"    pm.expect(jsonData[2]).to.have.property(\"Name\");\r",
							"});\r",
							"pm.test(\"Third product has a Category\", () => { \r",
							"    pm.expect(jsonData[2]).to.have.property(\"Category\");\r",
							"});\r",
							"pm.test(\"Third product has a Price\", () => { \r",
							"    pm.expect(jsonData[2]).to.have.property(\"Price\");\r",
							"});\r",
							"\r",
							"pm.test(\"First product ID is 1\", () => { \r",
							"    pm.expect(jsonData[0].Id).to.equal(1);\r",
							"});\r",
							"pm.test(\"First product Name is 'Tomato Soup'\", () => { \r",
							"    pm.expect(jsonData[0].Name).to.equal(\"Tomato Soup\");\r",
							"});\r",
							"pm.test(\"First product Category is 'Groceries'\", () => { \r",
							"    pm.expect(jsonData[0].Category).to.equal(\"Groceries\");\r",
							"});\r",
							"pm.test(\"First product Price is 1.0\", () => { \r",
							"    pm.expect(jsonData[0].Price).to.equal(1.0);\r",
							"});\r",
							"\r",
							"pm.test(\"Second product ID is 2\", () => { \r",
							"    pm.expect(jsonData[1].Id).to.equal(2);\r",
							"});\r",
							"pm.test(\"Second product Name is 'Yo-yo'\", () => { \r",
							"    pm.expect(jsonData[1].Name).to.equal(\"Yo-yo\");\r",
							"});\r",
							"pm.test(\"Second product Category is 'Toys'\", () => { \r",
							"    pm.expect(jsonData[1].Category).to.equal(\"Toys\");\r",
							"});\r",
							"pm.test(\"Second product Price is 3.75\", () => { \r",
							"    pm.expect(jsonData[1].Price).to.equal(3.75);\r",
							"});\r",
							"\r",
							"pm.test(\"Third product ID is 3\", () => { \r",
							"    pm.expect(jsonData[2].Id).to.equal(3);\r",
							"});\r",
							"pm.test(\"Third product Name is 'Hammer'\", () => { \r",
							"    pm.expect(jsonData[2].Name).to.equal(\"Hammer\");\r",
							"});\r",
							"pm.test(\"Third product Category is 'Hardware'\", () => { \r",
							"    pm.expect(jsonData[2].Category).to.equal(\"Hardware\");\r",
							"});\r",
							"pm.test(\"Third product Price is 16.99\", () => { \r",
							"    pm.expect(jsonData[2].Price).to.equal(16.99);\r",
							"});\r",
							"\r",
							"pm.test(\"First product ID is a number\", () => { \r",
							"    pm.expect(jsonData[0].Id).to.be.a(\"number\");\r",
							"});\r",
							"pm.test(\"First product Name is a string\", () => { \r",
							"    pm.expect(jsonData[0].Name).to.be.a(\"string\");\r",
							"});\r",
							"pm.test(\"First product Category is a string\", () => { \r",
							"    pm.expect(jsonData[0].Category).to.be.a(\"string\");\r",
							"});\r",
							"pm.test(\"First product Price is a number\", () => { \r",
							"    pm.expect(jsonData[0].Price).to.be.a(\"number\");\r",
							"});\r",
							"\r",
							"pm.test(\"Second product ID is a number\", () => { \r",
							"    pm.expect(jsonData[1].Id).to.be.a(\"number\");\r",
							"});\r",
							"pm.test(\"Second product Name is a string\", () => { \r",
							"    pm.expect(jsonData[1].Name).to.be.a(\"string\");\r",
							"});\r",
							"pm.test(\"Second product Category is a string\", () => { \r",
							"    pm.expect(jsonData[1].Category).to.be.a(\"string\");\r",
							"});\r",
							"pm.test(\"Second product Price is a number\", () => { \r",
							"    pm.expect(jsonData[1].Price).to.be.a(\"number\");\r",
							"});\r",
							"\r",
							"pm.test(\"Third product ID is a number\", () => { \r",
							"    pm.expect(jsonData[2].Id).to.be.a(\"number\");\r",
							"});\r",
							"pm.test(\"Third product Name is a string\", () => { \r",
							"    pm.expect(jsonData[2].Name).to.be.a(\"string\");\r",
							"});\r",
							"pm.test(\"Third product Category is a string\", () => { \r",
							"    pm.expect(jsonData[2].Category).to.be.a(\"string\");\r",
							"});\r",
							"pm.test(\"Third product Price is a number\", () => { \r",
							"    pm.expect(jsonData[2].Price).to.be.a(\"number\");\r",
							"});\r",
							"\r",
							"pm.test(\"First product ID is greater than 0\", () => { \r",
							"    pm.expect(jsonData[0].Id).to.be.above(0);\r",
							"});\r",
							"pm.test(\"First product Name length is greater than 3\", () => { \r",
							"    pm.expect(jsonData[0].Name.length).to.be.above(3);\r",
							"});\r",
							"pm.test(\"First product Category contains 'Groceries'\", () => { \r",
							"    pm.expect(jsonData[0].Category).to.include(\"Groceries\");\r",
							"});\r",
							"pm.test(\"First product Price is greater than 0\", () => { \r",
							"    pm.expect(jsonData[0].Price).to.be.above(0);\r",
							"});\r",
							"\r",
							"pm.test(\"Second product ID is greater than 0\", () => { \r",
							"    pm.expect(jsonData[1].Id).to.be.above(0);\r",
							"});\r",
							"pm.test(\"Second product Name length is greater than 3\", () => { \r",
							"    pm.expect(jsonData[1].Name.length).to.be.above(3);\r",
							"});\r",
							"pm.test(\"Second product Category contains 'Toys'\", () => { \r",
							"    pm.expect(jsonData[1].Category).to.include(\"Toys\");\r",
							"});\r",
							"pm.test(\"Second product Price is greater than 0\", () => { \r",
							"    pm.expect(jsonData[1].Price).to.be.above(0);\r",
							"});\r",
							"\r",
							"pm.test(\"Third product ID is greater than 0\", () => { \r",
							"    pm.expect(jsonData[2].Id).to.be.above(0);\r",
							"});\r",
							"pm.test(\"Third product Name length is greater than 3\", () => { \r",
							"    pm.expect(jsonData[2].Name.length).to.be.above(3);\r",
							"});\r",
							"pm.test(\"Third product Category contains 'Hardware'\", () => { \r",
							"    pm.expect(jsonData[2].Category).to.include(\"Hardware\");\r",
							"});\r",
							"pm.test(\"Third product Price is greater than 0\", () => { \r",
							"    pm.expect(jsonData[2].Price).to.be.above(0);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost:44337/api/products",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "44337",
					"path": [
						"api",
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Soup",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Response is 200 OK\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Product has an ID\", () => { \r",
							"    pm.expect(jsonData).to.have.property(\"Id\");\r",
							"});\r",
							"pm.test(\"Product has a Name\", () => { \r",
							"    pm.expect(jsonData).to.have.property(\"Name\");\r",
							"});\r",
							"pm.test(\"Product has a Category\", () => { \r",
							"    pm.expect(jsonData).to.have.property(\"Category\");\r",
							"});\r",
							"pm.test(\"Product has a Price\", () => { \r",
							"    pm.expect(jsonData).to.have.property(\"Price\");\r",
							"});\r",
							"\r",
							"pm.test(\"Product ID is 1\", () => { \r",
							"    pm.expect(jsonData.Id).to.equal(1);\r",
							"});\r",
							"pm.test(\"Product Name is 'Tomato Soup'\", () => { \r",
							"    pm.expect(jsonData.Name).to.equal(\"Tomato Soup\");\r",
							"});\r",
							"pm.test(\"Product Category is 'Groceries'\", () => { \r",
							"    pm.expect(jsonData.Category).to.equal(\"Groceries\");\r",
							"});\r",
							"pm.test(\"Product Price is '1.0'\", () => { \r",
							"    pm.expect(jsonData.Price).to.equal(1.0);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Product ID is a number\", () => { \r",
							"    pm.expect(jsonData.Id).to.be.a(\"number\");\r",
							"});\r",
							"pm.test(\"Product Name is a string\", () => { \r",
							"    pm.expect(jsonData.Name).to.be.a(\"string\");\r",
							"});\r",
							"pm.test(\"Product Category is a string\", () => { \r",
							"    pm.expect(jsonData.Category).to.be.a(\"string\");\r",
							"});\r",
							"pm.test(\"Product Price is a number\", () => { \r",
							"    pm.expect(jsonData.Price).to.be.a(\"number\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Product ID is greater than 0\", () => { \r",
							"    pm.expect(jsonData.Id).to.be.above(0);\r",
							"});\r",
							"pm.test(\"Product Name Contains 'T'\", () => { \r",
							"    pm.expect(jsonData.Name).to.include(\"T\");\r",
							"});\r",
							"pm.test(\"Product Category contains 'G'\", () => { \r",
							"    pm.expect(jsonData.Category).to.include(\"G\");\r",
							"});\r",
							"pm.test(\"Product Price is greater than 0\", () => { \r",
							"    pm.expect(jsonData.Price).to.be.above(0);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost:44337/api/products/1",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "44337",
					"path": [
						"api",
						"products",
						"1"
					]
				}
			},
			"response": []
		}
	]
}